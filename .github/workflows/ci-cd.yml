name: Trading Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy black
        pip install -r requirements.txt
        
    - name: Run Ruff (Linting)
      run: ruff check backend/ tests/ --output-format=github
      
    - name: Run Black (Formatting Check)
      run: black --check backend/ tests/
      
    - name: Run MyPy (Type Checking)
      run: mypy backend/ --ignore-missing-imports

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r backend/ -f json -o bandit-report.json
        
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [unit, integration]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Create test environment
      run: |
        cp .env.example .env
        echo "TEST_MODE=true" >> .env
        echo "MOCK_BROKER=true" >> .env
        
    - name: Run Unit Tests
      if: matrix.test-group == 'unit'
      run: |
        pytest tests/unit/ -v --cov=backend --cov-report=xml --cov-report=html
        
    - name: Run Integration Tests
      if: matrix.test-group == 'integration'
      run: |
        pytest tests/integration/ -v --cov=backend --cov-append --cov-report=xml
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-group }}
        name: codecov-${{ matrix.test-group }}

  layer2-validation:
    name: Layer 2 Validation Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
        
    - name: Test Parity Regression
      run: |
        cd backend
        python -c "
        from infra.metrics import get_trading_metrics
        metrics = get_trading_metrics()
        metrics.record_order_submitted('TEST', 'buy', 'ci_test')
        output = metrics.get_metrics()
        assert 'orders_submitted_total' in output
        print('‚úÖ Metrics system operational')
        "
        
    - name: Validate Strategy Runner
      run: |
        cd backend  
        python -c "
        from services.strategy_runner import ExecutionMode
        from adapters.fill_simulator import FillSimulatorAdapter
        print('‚úÖ Strategy Runner imports successful')
        "
        
    - name: Test FastAPI Health Endpoints
      run: |
        cd backend
        python -c "
        from fastapi.testclient import TestClient
        from api.metrics_api import app
        client = TestClient(app)
        response = client.get('/health')
        assert response.status_code == 200
        print('‚úÖ FastAPI health endpoint working')
        "

  build-docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << EOF
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY backend/ ./backend/
        COPY .env.example .env
        
        # Create non-root user
        RUN adduser --disabled-password --gecos '' trading
        RUN chown -R trading:trading /app
        USER trading
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
          CMD python -c "import requests; requests.get('http://localhost:8002/api/health')"
        
        # Expose port
        EXPOSE 8002
        
        # Start command
        CMD ["uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8002"]
        EOF
        
    - name: Build Docker Image
      run: |
        docker build -t trading-platform:${{ github.sha }} .
        docker tag trading-platform:${{ github.sha }} trading-platform:latest
        
    - name: Test Docker Image
      run: |
        # Start container in background
        docker run -d --name test-container -p 8002:8002 \
          -e TEST_MODE=true \
          -e MOCK_BROKER=true \
          trading-platform:${{ github.sha }}
        
        # Wait for startup
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8002/api/health || exit 1
        
        # Test metrics endpoint  
        curl -f http://localhost:8002/metrics || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
    - name: Save Docker Image
      run: |
        docker save trading-platform:${{ github.sha }} | gzip > trading-platform.tar.gz
        
    - name: Upload Docker Artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image-${{ github.sha }}
        path: trading-platform.tar.gz

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark
        
    - name: Run Performance Tests
      run: |
        cd backend
        python -c "
        import time
        from infra.metrics import get_trading_metrics, MetricsTimer
        
        # Benchmark metrics recording
        metrics = get_trading_metrics()
        
        start = time.time()
        for i in range(1000):
            metrics.record_order_submitted('PERF_TEST', 'buy', 'benchmark')
        duration = time.time() - start
        
        print(f'‚ö° Metrics recording: {1000/duration:.0f} ops/sec')
        
        # Benchmark context manager
        start = time.time()
        for i in range(100):
            with MetricsTimer('order_submit', symbol='PERF', side='buy'):
                time.sleep(0.001)
        duration = time.time() - start
        
        print(f'‚ö° MetricsTimer overhead: {duration/100*1000:.2f}ms per operation')
        print('‚úÖ Performance benchmarks completed')
        "

  deploy-ready-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, layer2-validation, build-docker, performance-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deployment Readiness Checklist
      run: |
        echo "üöÄ DEPLOYMENT READINESS CHECKLIST"
        echo "================================="
        
        # Check required files exist
        files=("README.md" "RUNBOOK.md" "AUDIT.md" ".env.example" "grafana-dashboard.json")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
        # Check backend structure
        dirs=("backend/api" "backend/services" "backend/adapters" "backend/infra")
        for dir in "${dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "‚úÖ $dir structure exists"  
          else
            echo "‚ùå $dir missing"
            exit 1
          fi
        done
        
        # Check test coverage
        if [ -d "tests/integration" ] && [ -d "tests/unit" ]; then
          echo "‚úÖ Test structure complete"
        else
          echo "‚ùå Test structure incomplete"
          exit 1
        fi
        
        echo ""
        echo "üéâ ALL DEPLOYMENT CHECKS PASSED!"
        echo "‚úÖ Code quality validated"
        echo "‚úÖ Tests passing"
        echo "‚úÖ Docker image built and tested"
        echo "‚úÖ Documentation complete"
        echo "‚úÖ Layer 2 architecture validated"
        echo ""
        echo "üöÄ READY FOR PRODUCTION DEPLOYMENT!"

  notify-success:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-ready-check]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Success Notification
      run: |
        echo "üéâ TRADING PLATFORM CI/CD SUCCESS!"
        echo "=================================="
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Status: READY FOR PRODUCTION"
        echo ""
        echo "Next Steps:"
        echo "1. Deploy to staging environment"
        echo "2. Run 48-hour paper trading soak test"  
        echo "3. Configure Prometheus/Grafana monitoring"
        echo "4. Execute canary live trading deployment"
