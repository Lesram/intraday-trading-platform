# ðŸ“Š MONITORING SERVICE - KUBERNETES DEPLOYMENT
# Comprehensive observability with metrics, tracing, and alerting

apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-service
  namespace: trading
  labels:
    app: monitoring-service
    tier: infrastructure
    version: v1
spec:
  replicas: 1
  strategy:
    type: Recreate  # Monitoring service needs persistent storage
  selector:
    matchLabels:
      app: monitoring-service
  template:
    metadata:
      labels:
        app: monitoring-service
        tier: infrastructure
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: monitoring-service
        image: trading/monitoring-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: metrics
        env:
        - name: POSTGRES_HOST
          value: "postgres-service"
        - name: REDIS_HOST
          value: "redis-service"
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        - name: GRAFANA_URL
          value: "http://grafana:3000"
        - name: JAEGER_URL
          value: "http://jaeger-query:16686"
        - name: ALERT_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: webhook-url
        - name: SLACK_TOKEN
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: slack-token
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        volumeMounts:
        - name: monitoring-storage
          mountPath: /app/data
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: monitoring-storage
        persistentVolumeClaim:
          claimName: monitoring-storage-pvc
      securityContext:
        fsGroup: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-service
  namespace: trading
  labels:
    app: monitoring-service
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: metrics
  selector:
    app: monitoring-service

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: trading
type: Opaque
data:
  # Base64 encoded monitoring credentials - REPLACE WITH ACTUAL VALUES
  webhook-url: WUVF1UkFQSSyS0VZLVBMQUNFSE9MREVS  # YOUR_WEBHOOK_URL placeholder
  slack-token: WUVF1UkFQSSyS0VZLVBMQUNFSE9MREVS  # YOUR_SLACK_TOKEN placeholder

---
# PERSISTENT VOLUMES FOR MICROSERVICES
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-storage-pvc
  namespace: trading
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-storage-pvc
  namespace: trading
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: monitoring-storage-pvc
  namespace: trading
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# NAMESPACE FOR ALL TRADING SERVICES
apiVersion: v1
kind: Namespace
metadata:
  name: trading
  labels:
    name: trading
    monitoring: enabled
    
---
# NETWORK POLICIES FOR SECURITY
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trading-network-policy
  namespace: trading
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: trading
    - namespaceSelector:
        matchLabels:
          name: monitoring
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: trading
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
