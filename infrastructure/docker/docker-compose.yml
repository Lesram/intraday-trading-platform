# üöÄ MICROSERVICES TRADING PLATFORM - DOCKER COMPOSE
# Production-ready microservices architecture with scalability

version: '3.8'

services:
  # üéØ API Gateway - Kong for service mesh and rate limiting
  api-gateway:
    image: kong:3.4
    container_name: trading-api-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä Prediction Service - ML model serving
  prediction-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.prediction
    container_name: trading-prediction-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - MODEL_PATH=/app/models
      - GPU_ENABLED=false
    volumes:
      - ../../models:/app/models
      - ../../data:/app/data
    ports:
      - "8080:8080"
    networks:
      - trading-network
    depends_on:
      - redis
      - kafka
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üõ°Ô∏è Risk Service - Risk management and Vector Kelly
  risk-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.risk
    container_name: trading-risk-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=trading_risk
      - POSTGRES_USER=risk_user
      - POSTGRES_PASSWORD=risk_password
    ports:
      - "8081:8081"
    networks:
      - trading-network
    depends_on:
      - postgres
      - redis
      - kafka
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üì° Data Service - Market data ingestion
  data-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.data
    container_name: trading-data-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - DATA_RETENTION_DAYS=30
    ports:
      - "8082:8082"
    networks:
      - trading-network
    depends_on:
      - redis
      - kafka
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üì± Sentiment Service - Enhanced sentiment analysis
  sentiment-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.sentiment
    container_name: trading-sentiment-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - BOT_DETECTION_ENABLED=true
      - VALIDATION_MODE=true
    ports:
      - "8083:8083"
    networks:
      - trading-network
    depends_on:
      - redis
      - kafka
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üíº Portfolio Service - Portfolio management
  portfolio-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.portfolio
    container_name: trading-portfolio-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=trading_portfolio
      - POSTGRES_USER=portfolio_user
      - POSTGRES_PASSWORD=portfolio_password
    ports:
      - "8084:8084"
    networks:
      - trading-network
    depends_on:
      - postgres
      - redis
      - kafka
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ‚ö° Execution Service - Trade execution
  execution-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.execution
    container_name: trading-execution-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL}
      - EXECUTION_MODE=paper  # paper/live
    ports:
      - "8085:8085"
    networks:
      - trading-network
    depends_on:
      - redis
      - kafka
    deploy:
      replicas: 1  # Single instance for execution coordination
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìà Monitoring Service - System monitoring and alerting
  monitoring-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.monitoring
    container_name: trading-monitoring-service
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - PROMETHEUS_URL=http://prometheus:9090
      - ALERTMANAGER_URL=http://alertmanager:9093
    ports:
      - "8086:8086"
    networks:
      - trading-network
    depends_on:
      - prometheus
      - alertmanager
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: trading-postgres
    environment:
      POSTGRES_DB: trading
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üì¶ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üì® Apache Kafka - Message streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: trading-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - trading-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: trading-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: trading-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading-network

  # üìà Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: trading-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - trading-network
    depends_on:
      - prometheus

  # üîî AlertManager - Alert handling
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: trading-alertmanager
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - trading-network

  # üîç Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: trading-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    networks:
      - trading-network

  # üåê NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/upstreams.conf:/etc/nginx/conf.d/upstreams.conf
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading-network
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# üöÄ DEPLOYMENT COMMANDS:
# docker-compose up -d                    # Start all services
# docker-compose up -d --scale prediction-service=5  # Scale prediction service
# docker-compose logs -f prediction-service          # View logs
# docker-compose exec postgres psql -U admin trading # Connect to DB
# docker-compose down                     # Stop all services
# docker-compose down -v                  # Stop and remove volumes
